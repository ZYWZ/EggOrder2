<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        ">

	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:/database.properties" />
	</bean>

       <context:component-scan base-package="au.usyd.elec5619.dao"></context:component-scan>
       <context:component-scan base-package="au.usyd.elec5619.service"></context:component-scan>

	<!-- config data source, here we use DBCP data source -->
	<bean name="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- configure Hibernate session factory, this will be used in DAO class -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
			</props>
		</property>

		<!-- automatic scan domain package -->
		<property name="packagesToScan">
			<list>
				<value>au.usyd.elec5619.domain</value>
			</list>
		</property>
	</bean>

	<!-- Transaction manager -->
	<bean name="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<tx:annotation-driven proxy-target-class="true" />
	
       <!-- 配置jdbc模板 -->
        <bean id="jdbcTemplate"
       class="org.springframework.jdbc.core.JdbcTemplate"
       p:dataSource-ref="dataSource"></bean>
      
       <!-- 配置数据源事务管理 -->
       <bean id="dataSourceTanslationManager"
       class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
       p:dataSource-ref="dataSource"></bean>
      
     <mvc:interceptors>
      <!--  <bean class="cn.lzc.interceptor.CustomInterceptor"></bean>--><!--拦截所有请求-->
<!--         <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/" /><&lt;!&ndash;配置了mapping 这个 将不再起作用&ndash;&gt;
            <bean class="cn.lzc.interceptor.CustomInterceptor"></bean>
        </mvc:interceptor> -->
        
        <!--<mvc:interceptor>-->
           <!--<mvc:mapping path="/hello" />&lt;!&ndash;配置拦截hello结尾的&ndash;&gt;-->
            <!--<bean class="cn.lzc.interceptor.CustomInterceptor"/>-->
        <!--</mvc:interceptor>-->
        
        <!--登录拦截器-->
        <mvc:interceptor>
            <mvc:mapping path="/home"/>
	    <mvc:mapping path="/calendar/**"/>
	    <mvc:mapping path="/analyze"/>
            <bean class="au.usyd.elec5619.service.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>
      
       <!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
<!--        <aop:config proxy-target-class="true">
           <aop:pointcut id="serviceMethod"
              expression=" execution(* com.baobaotao.service..*(..))"/>
           <aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
       </aop:config>
       <tx:advice id="txAdvice" transaction-manager="dataSourceTanslationManager">
           <tx:attributes>
              <tx:method name="*"/>
           </tx:attributes>
       </tx:advice> -->
	

</beans>
